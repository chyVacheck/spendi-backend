#!/usr/bin/env bash
#
# Spendi - Project Management Utility
# Description: Build, run, stop, and manage the Spendi backend (Javalin).
# Author: chyvacheck (reworked by assistant)
# Version: 2.0.0
# Date: 2025-09-13
# Platforms: macOS, Debian/Ubuntu
#
# Commands:
#   build        - mvn clean package -DskipTests
#   test         - mvn test (unit tests only)
#   test:it      - mvn failsafe:integration-test failsafe:verify (integration tests only)
#   clean        - mvn clean
#   run          - start in background (with PID file)
#   run:fg       - start in foreground (dev)
#   stop         - graceful stop by PID (TERM -> wait -> KILL)
#   restart      - stop then run
#   reload       - alias to restart
#   status       - show status by PID/port
#   version      - print Java/Maven/App versions
#   doctor       - preflight checks (tools, ports, dirs)
#
# Notes:
# - App config & logs are handled by the application (.env and storage/logs).
# - This script will NOT redirect logs; background mode detaches stdout/stderr.
# - PID file lives at .runtime/spendi.pid relative to the project root.
# - Default port is 6070 (override with env PORT=XXXX before the command).
# - Requires Java 21+ and Maven available in PATH.
#

set -euo pipefail

# ----------------------------- Colors & Emojis -------------------------------
: "${NO_COLOR:=}"  # if set (non-empty), disables colors

if [[ -t 1 ]] && [[ -z "${NO_COLOR}" ]] && [[ "${TERM:-}" != "dumb" ]]; then
  RED=$'\033[0;31m'; GREEN=$'\033[0;32m'; YELLOW=$'\033[0;33m'; BLUE=$'\033[0;34m'; NC=$'\033[0m'
else
  RED=""; GREEN=""; YELLOW=""; BLUE=""; NC=""
fi

# Emojis (fallback to plain text when not supported is okay)
CHECK="‚úÖ"; CROSS="‚ùå"; WARN="‚ö†Ô∏è"; INFO="‚ÑπÔ∏è"; ROCKET="üöÄ"; HAMMER="üî®"; POWER="üü¢"; STOP="üõë"

# ------------------------------ Paths & Setup --------------------------------
# Resolve script directory (portable across macOS/Linux; no readlink -f)
SCRIPT_DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="${SCRIPT_DIR}"
RUNTIME_DIR="${PROJECT_ROOT}/.runtime"
PID_FILE="${RUNTIME_DIR}/spendi.pid"
TARGET_DIR="${PROJECT_ROOT}/target"
DEFAULT_PORT="${PORT:-6070}"

mkdir -p "${RUNTIME_DIR}"

# ------------------------------ Utilities ------------------------------------
die() { echo -e "${RED}${CROSS} $*${NC}" >&2; exit 1; }
note() { echo -e "${BLUE}${INFO} $*${NC}"; }
warn() { echo -e "${YELLOW}${WARN} $*${NC}"; }
ok()  { echo -e "${GREEN}${CHECK} $*${NC}"; }

have_cmd() { command -v "$1" >/dev/null 2>&1; }

require_tools() {
  local missing=0

  if ! have_cmd java; then
    warn "Java –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ PATH."
    missing=1
  fi
  if ! have_cmd mvn; then
    warn "Maven –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH."
    missing=1
  fi
  if (( missing )); then
    die "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Java (21+) –∏ Maven."
  fi

  # Java version check (needs 21+)
  local ver_line major
  ver_line="$(java -version 2>&1 | head -n1)"
  # Examples:
  #   openjdk version "21.0.2"  -> major=21
  #   openjdk version "23"      -> major=23
  #   java version "1.8.0_312"  -> major=1 (legacy)
  major="$(sed -nE 's/.*version "([0-9]+)(\.[0-9]+)?(\.[0-9]+)?.*/\1/p' <<<"$ver_line")"
  if [[ -z "${major}" ]]; then
    warn "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é Java –∏–∑ —Å—Ç—Ä–æ–∫–∏: ${ver_line}"
  else
    if (( major < 21 )); then
      die "–¢—Ä–µ–±—É–µ—Ç—Å—è Java 21 –∏–ª–∏ –≤—ã—à–µ. –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: ${ver_line}"
    fi
  fi
}

find_jar() {
  # Pick the newest JAR in target/ (excluding test jars if present)
  if [[ ! -d "${TARGET_DIR}" ]]; then
    echo ""
    return 0
  fi
  local jar
  jar="$(ls -1t "${TARGET_DIR}"/*.jar 2>/dev/null | head -n1 || true)"
  echo "${jar}"
}

pid_is_alive() {
  local pid="$1"
  if [[ -z "${pid}" ]]; then return 1; fi
  if kill -0 "${pid}" 2>/dev/null; then
    return 0
  else
    return 1
  fi
}

read_pid() {
  [[ -f "${PID_FILE}" ]] || { echo ""; return 1; }
  local pid
  pid="$(cat "${PID_FILE}" 2>/dev/null || true)"
  if [[ -z "${pid}" ]]; then
    rm -f "${PID_FILE}"
    echo ""
    return 1
  fi
  echo "${pid}"
  return 0
}

port_in_use() {
  local port="$1"
  # Try lsof (macOS, often installed on Linux too)
  if have_cmd lsof; then
    if lsof -iTCP:"${port}" -sTCP:LISTEN -Pn >/dev/null 2>&1; then return 0; else return 1; fi
  fi
  # Try ss (Linux)
  if have_cmd ss; then
    if ss -ltn "( sport = :${port} )" | tail -n +2 | grep -q .; then return 0; else return 1; fi
  fi
  # Try netstat (fallback)
  if have_cmd netstat; then
    if netstat -ltn 2>/dev/null | awk '{print $4}' | grep -E "[:.]${port}\$" -q; then return 0; else return 1; fi
  fi
  # If no tool available, we can't reliably detect
  warn "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–Ω—è—Ç–æ—Å—Ç—å –ø–æ—Ä—Ç–∞ ${port} (–Ω–µ—Ç lsof/ss/netstat). –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–∞ —Å–≤–æ–π —Ä–∏—Å–∫."
  return 1
}

ensure_port_free() {
  local port="${1:-$DEFAULT_PORT}"
  if port_in_use "${port}"; then
    die "–ü–æ—Ä—Ç ${port} —É–∂–µ –∑–∞–Ω—è—Ç. –ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω."
  fi
}

write_pid() {
  local pid="$1"
  echo "${pid}" > "${PID_FILE}"
}

clear_pid_if_stale() {
  if [[ -f "${PID_FILE}" ]]; then
    local pid
    pid="$(cat "${PID_FILE}" 2>/dev/null || true)"
    if [[ -n "${pid}" && ! $(kill -0 "${pid}" 2>/dev/null && echo alive) ]]; then
      warn "–ù–∞–π–¥–µ–Ω –±–∏—Ç—ã–π PID-—Ñ–∞–π–ª (${PID_FILE}). –£–¥–∞–ª—è—é..."
      rm -f "${PID_FILE}"
      return 0
    fi
  fi
  return 0
}

# ------------------------------ Commands -------------------------------------
cmd_build() {
  require_tools
  note "${HAMMER} –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ (skip tests)..."
  (cd "${PROJECT_ROOT}" && mvn clean package -DskipTests)
  ok "–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω."
}

cmd_test() {
  require_tools
  note "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
  (cd "${PROJECT_ROOT}" && mvn test)
  ok "Unit-—Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã."
}

cmd_test_it() {
  require_tools
  note "–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ (Failsafe)..."
  (cd "${PROJECT_ROOT}" && mvn -DtrimStackTrace=false test-compile failsafe:integration-test failsafe:verify)
  ok "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã."
}

cmd_clean() {
  require_tools
  note "–û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤..."
  (cd "${PROJECT_ROOT}" && mvn clean)
  ok "–ì–æ—Ç–æ–≤–æ."
}

cmd_status() {
  clear_pid_if_stale
  local pid
  pid="$(read_pid || true)"
  if [[ -n "${pid}" ]] && pid_is_alive "${pid}"; then
    ok "${POWER} –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ. PID: ${pid}"
    echo "PID-—Ñ–∞–π–ª: ${PID_FILE}"
    echo "–ü–æ—Ä—Ç (–æ–∂–∏–¥–∞–µ–º—ã–π): ${DEFAULT_PORT}"
    return 0
  fi
  if [[ -f "${PID_FILE}" ]]; then
    warn "–ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ PID-—Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª. PID-—Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω."
    rm -f "${PID_FILE}"
  fi
  echo -e "${YELLOW}${WARN} –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ.${NC}"
  return 3
}

cmd_run_fg() {
  require_tools
  clear_pid_if_stale
  ensure_port_free "${DEFAULT_PORT}"

  local jar
  jar="$(find_jar)"
  if [[ -z "${jar}" ]]; then
    warn "–ù–µ –Ω–∞–π–¥–µ–Ω JAR –≤ target/. –í—ã–ø–æ–ª–Ω—è—é —Å–±–æ—Ä–∫—É..."
    cmd_build
    jar="$(find_jar)"
    [[ -n "${jar}" ]] || die "–ü–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏ JAR –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω."
  fi

  note "${ROCKET} –ó–∞–ø—É—Å–∫ –≤ foreground (dev). –ü–æ—Ä—Ç: ${DEFAULT_PORT}"
  note "Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. PID-—Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è."

  # Forward signals to child
  trap 'echo; warn "–ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω Ctrl+C/SIGINT. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ..."; kill -TERM $child 2>/dev/null || true; wait $child 2>/dev/null || true; exit 130' INT
  trap 'echo; warn "–ü–æ–ª—É—á–µ–Ω SIGTERM. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ..."; kill -TERM $child 2>/dev/null || true; wait $child 2>/dev/null || true; exit 143' TERM

  (cd "${PROJECT_ROOT}" && exec java -jar "${jar}") &
  local child=$!
  wait "$child"
}

cmd_run_bg() {
  require_tools
  clear_pid_if_stale
  if [[ -f "${PID_FILE}" ]]; then
    local oldpid
    oldpid="$(cat "${PID_FILE}" 2>/dev/null || true)"
    if [[ -n "${oldpid}" ]] && pid_is_alive "${oldpid}"; then
      die "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ (PID ${oldpid})."
    else
      warn "–£–¥–∞–ª—è—é —É—Å—Ç–∞—Ä–µ–≤—à–∏–π PID-—Ñ–∞–π–ª."
      rm -f "${PID_FILE}"
    fi
  fi

  ensure_port_free "${DEFAULT_PORT}"

  local jar
  jar="$(find_jar)"
  if [[ -z "${jar}" ]]; then
    warn "–ù–µ –Ω–∞–π–¥–µ–Ω JAR –≤ target/. –í—ã–ø–æ–ª–Ω—è—é —Å–±–æ—Ä–∫—É..."
    cmd_build
    jar="$(find_jar)"
    [[ -n "${jar}" ]] || die "–ü–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏ JAR –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω."
  fi

  note "${ROCKET} –ó–∞–ø—É—Å–∫ –≤ background. –ü–æ—Ä—Ç: ${DEFAULT_PORT}"

  # –í–ê–ñ–ù–û: –∑–∞–ø—É—Å–∫–∞–µ–º –≤ –¢–ï–ö–£–©–ï–ú SHELL, —á—Ç–æ–±—ã $! –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω.
  cd "${PROJECT_ROOT}" || die "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ ${PROJECT_ROOT}"
  nohup java -jar "${jar}" >/dev/null 2>&1 &
  local pid=$!

  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤
  sleep 0.5
  if ! pid_is_alive "${pid}"; then
    # Fallback: –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø–æ –∏–º–µ–Ω–∏ JAR
    local jarname found
    jarname="$(basename "${jar}")"
    found="$(pgrep -f "java .*${jarname}" | head -n1 || true)"
    if [[ -n "${found}" ]] && pid_is_alive "${found}"; then
      pid="${found}"
    fi
  fi

  if pid_is_alive "${pid}"; then
    write_pid "${pid}"
    ok "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ. PID: ${pid}"
    echo "PID-—Ñ–∞–π–ª: ${PID_FILE}"
  else
    die "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (PID –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω)."
  fi
}

cmd_stop() {
  clear_pid_if_stale
  local pid
  pid="$(read_pid || true)"
  if [[ -z "${pid}" ]]; then
    warn "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ (PID-—Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)."
    return 3
  fi
  if ! pid_is_alive "${pid}"; then
    warn "–ü—Ä–æ—Ü–µ—Å—Å PID ${pid} –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–¥–∞–ª—è—é PID-—Ñ–∞–π–ª."
    rm -f "${PID_FILE}"
    return 3
  fi

  note "${STOP} –û—Å—Ç–∞–Ω–æ–≤–∫–∞ PID ${pid} (TERM)..."
  kill -TERM "${pid}" 2>/dev/null || true

  local waited=0 timeout=10
  while pid_is_alive "${pid}" && (( waited < timeout )); do
    sleep 1
    (( waited++ ))
  done

  if pid_is_alive "${pid}"; then
    warn "–ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ ${timeout}—Å. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ (KILL)."
    kill -KILL "${pid}" 2>/dev/null || true
    sleep 0.5
  fi

  rm -f "${PID_FILE}"
  ok "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ."
}

cmd_restart() {
  cmd_stop || true
  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –û–° –æ—Å–≤–æ–±–æ–¥–∏–ª–∞ –ø–æ—Ä—Ç
  sleep 0.5
  cmd_run_bg
}

cmd_version() {
  if have_cmd java; then
    echo "Java: $(java -version 2>&1 | head -n1)"
  else
    echo "Java: (–Ω–µ –Ω–∞–π–¥–µ–Ω–∞)"
  fi
  if have_cmd mvn; then
    echo "Maven: $(mvn -v 2>/dev/null | head -n1)"
  else
    echo "Maven: (–Ω–µ –Ω–∞–π–¥–µ–Ω)"
  fi
  # Try to read app version from Maven
  if have_cmd mvn; then
    local app_ver
    app_ver="$(cd "${PROJECT_ROOT}" && mvn -q -DforceStdout help:evaluate -Dexpression=project.version 2>/dev/null || true)"
    if [[ -n "${app_ver}" ]]; then
      echo "App version (pom.xml): ${app_ver}"
    fi
  fi
}

cmd_doctor() {
  local rc=0
  echo "=== Doctor ==="
  if have_cmd java; then ok "Java –Ω–∞–π–¥–µ–Ω–∞"; else warn "Java –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"; rc=1; fi
  if have_cmd mvn; then ok "Maven –Ω–∞–π–¥–µ–Ω"; else warn "Maven –Ω–µ –Ω–∞–π–¥–µ–Ω"; rc=1; fi

  # Java version check
  if have_cmd java; then
    local ver_line major
    ver_line="$(java -version 2>&1 | head -n1)"
    major="$(sed -nE 's/.*version "([0-9]+).*/\1/p' <<<"$ver_line")"
    if [[ -n "${major}" && "${major}" -ge 21 ]]; then
      ok "Java –≤–µ—Ä—Å–∏—è –ø–æ–¥—Ö–æ–¥–∏—Ç: ${ver_line}"
    else
      warn "Java –≤–µ—Ä—Å–∏—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞: ${ver_line} (–Ω—É–∂–Ω–æ 21+)"; rc=1
    fi
  fi

  # Port check
  if port_in_use "${DEFAULT_PORT}"; then
    warn "–ü–æ—Ä—Ç ${DEFAULT_PORT} —É–∂–µ –∑–∞–Ω—è—Ç."
  else
    ok "–ü–æ—Ä—Ç ${DEFAULT_PORT} —Å–≤–æ–±–æ–¥–µ–Ω."
  fi

  # Runtime dir
  if [[ -w "${RUNTIME_DIR}" ]]; then ok "–ö–∞—Ç–∞–ª–æ–≥ runtime –¥–æ—Å—Ç—É–ø–µ–Ω: ${RUNTIME_DIR}"; else warn "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ ${RUNTIME_DIR}"; rc=1; fi

  exit "${rc}"
}

usage() {
  cat <<EOF
${BLUE}Spendi - —É—Ç–∏–ª–∏—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è${NC}

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $(basename "$0") <–∫–æ–º–∞–Ω–¥–∞>

–ö–æ–º–∞–Ω–¥—ã:
  ${GREEN}build${NC}       –°–±–æ—Ä–∫–∞ (mvn clean package -DskipTests)
  ${GREEN}test${NC}        –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ (mvn test)
  ${GREEN}test:it${NC}     –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã (mvn failsafe:integration-test failsafe:verify)
  ${GREEN}clean${NC}       –û—á–∏—Å—Ç–∫–∞ (mvn clean)
  ${GREEN}run${NC}         –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–µ (PID-—Ñ–∞–π–ª: .runtime/spendi.pid)
  ${GREEN}run:fg${NC}      –ó–∞–ø—É—Å–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
  ${GREEN}stop${NC}        –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ PID (TERM -> KILL)
  ${GREEN}restart${NC}     –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ (stop -> run)
  ${GREEN}reload${NC}      –ê–ª–∏–∞—Å –∫ restart
  ${GREEN}status${NC}      –°—Ç–∞—Ç—É—Å (PID/–ø–æ—Ä—Ç)
  ${GREEN}version${NC}     –í–µ—Ä—Å–∏–∏ Java/Maven/–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  ${GREEN}doctor${NC}      –ü—Ä–µ–¥-–ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  PORT      –ü–æ—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 6070)

–ü—Ä–∏–º–µ—Ä—ã:
  PORT=6070 ./spendi.sh run
  ./spendi.sh run:fg
  ./spendi.sh status
  ./spendi.sh stop
EOF
}

# ------------------------------ Dispatcher -----------------------------------
cmd="${1:-}"
case "${cmd}" in
  build)    shift; cmd_build "$@";;
  test)     shift; cmd_test "$@";;
  test:it)  shift; cmd_test_it "$@";;
  clean)    shift; cmd_clean "$@";;
  run)      shift; cmd_run_bg "$@";;
  run:fg)   shift; cmd_run_fg "$@";;
  stop)     shift; cmd_stop "$@";;
  restart)  shift; cmd_restart "$@";;
  reload)   shift; cmd_restart "$@";;
  status)   shift; cmd_status "$@";;
  version)  shift; cmd_version "$@";;
  doctor)   shift; cmd_doctor "$@";;
  ""|"help"|"-h"|"--help") usage;;
  *) die "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${cmd}. –°–º. 'help'.";;
esac
